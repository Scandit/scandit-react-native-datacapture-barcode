import React from 'react';
import { Anchor, CameraSettings, DataCaptureContext } from 'scandit-datacapture-frameworks-core';
import { BarcodeCheck, BarcodeCheckAnnotationProvider, BarcodeCheckHighlightProvider, BarcodeCheckViewSettings, BarcodeCheckViewUiListener } from 'scandit-datacapture-frameworks-barcode';
interface BarcodeCheckViewProps {
    context: DataCaptureContext;
    barcodeCheck: BarcodeCheck;
    settings?: BarcodeCheckViewSettings;
    cameraSettings?: CameraSettings;
    annotationProvider?: BarcodeCheckAnnotationProvider;
    highlightProvider?: BarcodeCheckHighlightProvider;
    uiListener?: BarcodeCheckViewUiListener;
    style?: any;
}
export declare class BarcodeCheckView extends React.Component<BarcodeCheckViewProps> {
    private baseBarcodeCheckView;
    static forMode(dataCaptureContext: DataCaptureContext, barcodeCheck: BarcodeCheck): BarcodeCheckView;
    static forModeWithViewSettings(dataCaptureContext: DataCaptureContext, barcodeCheck: BarcodeCheck, viewSettings: BarcodeCheckViewSettings): BarcodeCheckView;
    static forModeWithViewSettingsAndCameraSettings(dataCaptureContext: DataCaptureContext, barcodeCheck: BarcodeCheck, viewSettings: BarcodeCheckViewSettings, cameraSettings: CameraSettings): BarcodeCheckView;
    constructor(props: BarcodeCheckViewProps);
    componentDidMount(): Promise<void>;
    componentWillUnmount(): void;
    get uiListener(): BarcodeCheckViewUiListener | null;
    set uiListener(value: BarcodeCheckViewUiListener | null);
    get annotationProvider(): BarcodeCheckAnnotationProvider | null;
    set annotationProvider(value: BarcodeCheckAnnotationProvider | null);
    get highlightProvider(): BarcodeCheckHighlightProvider | null;
    set highlightProvider(value: BarcodeCheckHighlightProvider | null);
    start(): void;
    stop(): void;
    pause(): void;
    get shouldShowTorchControl(): boolean;
    set shouldShowTorchControl(value: boolean);
    get torchControlPosition(): Anchor;
    set torchControlPosition(value: Anchor);
    get shouldShowZoomControl(): boolean;
    set shouldShowZoomControl(value: boolean);
    get zoomControlPosition(): Anchor;
    set zoomControlPosition(value: Anchor);
    get shouldShowCameraSwitchControl(): boolean;
    set shouldShowCameraSwitchControl(value: boolean);
    get cameraSwitchControlPosition(): Anchor;
    set cameraSwitchControlPosition(value: Anchor);
    get shouldShowMacroModeControl(): boolean;
    set shouldShowMacroModeControl(value: boolean);
    get macroModeControlPosition(): Anchor;
    set macroModeControlPosition(value: Anchor);
    render(): React.JSX.Element;
    private createFragment;
    private toJSON;
}
export {};
